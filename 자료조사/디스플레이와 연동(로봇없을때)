#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>
#include <iostream>
#include <cstdlib>

#pragma comment(lib, "ws2_32.lib")

#define PORT 12345
#define BUFFER_SIZE 1024

const char* VIDEO1_PATH = "\"C:\\Users\\yomma\\OneDrive\\Desktop\\ÏÉà Ìè¥Îçî\\angry_smooth.mp4\"";
const char* VIDEO2_PATH = "\"C:\\Users\\yomma\\OneDrive\\Desktop\\ÏÉà Ìè¥Îçî\\happy_smooth.mp4\"";
const char* VIDEO3_PATH = "\"C:\\Users\\yomma\\OneDrive\\Desktop\\ÏÉà Ìè¥Îçî\\sad_smooth.mp4\"";

void playVideo(const char* videoPath) {
    std::string cmd = "start \"\" ";
    cmd += videoPath;
    system(cmd.c_str());
}

int main() {
    WSADATA wsaData;
    SOCKET serverSocket, clientSocket;
    struct sockaddr_in serverAddr, clientAddr;
    char buffer[BUFFER_SIZE];
    int clientSize;

    // Winsock Ï¥àÍ∏∞Ìôî
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup Ïã§Ìå®" << std::endl;
        return 1;
    }

    // ÏÜåÏºì ÏÉùÏÑ±
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == INVALID_SOCKET) {
        std::cerr << "ÏÜåÏºì ÏÉùÏÑ± Ïã§Ìå®" << std::endl;
        WSACleanup();
        return 1;
    }

    // Ï£ºÏÜå Íµ¨Ï°∞Ï≤¥ ÏÑ§Ï†ï
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(PORT);

    // Î∞îÏù∏Îìú
    if (bind(serverSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        std::cerr << "Î∞îÏù∏Îìú Ïã§Ìå®" << std::endl;
        closesocket(serverSocket);
        WSACleanup();
        return 1;
    }

    // Î¶¨Ïä®
    if (listen(serverSocket, SOMAXCONN) == SOCKET_ERROR) {
        std::cerr << "Î¶¨Ïä® Ïã§Ìå®" << std::endl;
        closesocket(serverSocket);
        WSACleanup();
        return 1;
    }

    std::cout << "‚úÖ ÏÑúÎ≤Ñ Ïã§Ìñâ Ï§ë (Ìè¨Ìä∏ " << PORT << ")" << std::endl;

    // ÏÑúÎ≤Ñ Ïã§ÌñâÍ≥º ÎèôÏãúÏóê angry_smooth.mp4 Ïã§Ìñâ
    std::cout << "‚ñ∂Ô∏è angry_smooth.mp4 Ïã§Ìñâ..." << std::endl;
    playVideo(VIDEO1_PATH);

    clientSize = sizeof(clientAddr);
    while (true) {
        std::cout << "üí§ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ ÎåÄÍ∏∞ Ï§ë..." << std::endl;

        clientSocket = accept(serverSocket, (sockaddr*)&clientAddr, &clientSize);
        if (clientSocket == INVALID_SOCKET) {
            std::cerr << "ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ïã§Ìå®" << std::endl;
            continue;
        }

        std::cout << "üîó ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ ÏÑ±Í≥µ!" << std::endl;

        // happy_smooth.mp4Î°ú Î≥ÄÍ≤Ω Ïã§Ìñâ (Í∏∞Ï°¥ ÏòÅÏÉÅÏùÄ ÏûêÎèô Ï¢ÖÎ£åÎêòÏßÄ ÏïäÏùå)
        std::cout << "‚ñ∂Ô∏è happy_smooth.mp4 Ïã§Ìñâ..." << std::endl;
        playVideo(VIDEO2_PATH);

        bool keepRunning = true;
        while (keepRunning) {
            int bytesReceived = recv(clientSocket, buffer, BUFFER_SIZE, 0);
            if (bytesReceived > 0) {
                buffer[bytesReceived] = '\0';
                std::cout << "üì® Î∞õÏùÄ Î©îÏãúÏßÄ: " << buffer << std::endl;

                // "sad" Î∞õÏúºÎ©¥ sad_smooth Ïã§Ìñâ
                if (strcmp(buffer, "sad") == 0) {
                    std::cout << "‚ñ∂Ô∏è sad_smooth.mp4 Ïã§Ìñâ..." << std::endl;
                    playVideo(VIDEO3_PATH);
                }

                if (strcmp(buffer, "exit") == 0) {
                    std::cout << "‚ùå ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¢ÖÎ£å ÏöîÏ≤≠ Î∞õÏùå. Ïó∞Í≤∞ Ï¢ÖÎ£å." << std::endl;
                    keepRunning = false;
                }

                std::string response = "ÏÑúÎ≤ÑÍ∞Ä Î©îÏãúÏßÄ Î∞õÏùå: ";
                response += buffer;
                send(clientSocket, response.c_str(), response.size(), 0);
            }
            else {
                std::cout << "‚ö†Ô∏è ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ï¢ÖÎ£å Í∞êÏßÄ." << std::endl;
                keepRunning = false;
            }
        }

        closesocket(clientSocket);
        std::cout << "üîÑ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÜåÏºì Îã´Ìûò. Îã§Ïùå Ïó∞Í≤∞ ÎåÄÍ∏∞ Ï§ë...\n" << std::endl;
    }

    closesocket(serverSocket);
    WSACleanup();
    return 0;
}
