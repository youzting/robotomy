#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>
#include <iostream>
#include <string>

#pragma comment(lib, "ws2_32.lib")

#define PORT 12345
#define BUFFER_SIZE 1024

const char* VIDEO1_PATH = "\"C:\\Users\\yomma\\OneDrive\\Desktop\\ÏÉà Ìè¥Îçî\\angry_smooth.mp4\"";
const char* VIDEO2_PATH = "\"C:\\Users\\yomma\\OneDrive\\Desktop\\ÏÉà Ìè¥Îçî\\happy_smooth.mp4\"";
const char* VIDEO3_PATH = "\"C:\\Users\\yomma\\OneDrive\\Desktop\\ÏÉà Ìè¥Îçî\\sad_smooth.mp4\"";

void playVideo(const char* videoPath) {
    std::string cmd = "start \"\" ";
    cmd += videoPath;
    system(cmd.c_str());
}

DWORD WINAPI ClientHandler(LPVOID clientSock) {
    SOCKET clientSocket = *(SOCKET*)clientSock;
    char buffer[BUFFER_SIZE];

    std::cout << "üîó ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïä§Î†àÎìú ÏãúÏûëÎê®!" << std::endl;
    playVideo(VIDEO2_PATH);

    bool keepRunning = true;
    while (keepRunning) {
        int bytesReceived = recv(clientSocket, buffer, BUFFER_SIZE - 1, 0);
        if (bytesReceived > 0) {
            buffer[bytesReceived] = '\0';
            std::string message(buffer);
            std::cout << "üì® Î∞õÏùÄ Î©îÏãúÏßÄ: " << message << std::endl;

            if (message == "sad") {
                std::cout << "‚ñ∂Ô∏è sad_smooth.mp4 Ïã§Ìñâ..." << std::endl;
                playVideo(VIDEO3_PATH);
            }
            else if (message == "exit") {
                std::cout << "‚ùå ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¢ÖÎ£å ÏöîÏ≤≠. Ïä§Î†àÎìú Ï¢ÖÎ£å." << std::endl;
                keepRunning = false;
            }
            else {
                std::cout << "‚ö†Ô∏è Ïïå Ïàò ÏóÜÎäî Î™ÖÎ†π. Î¨¥ÏãúÌï®: " << message << std::endl;
                std::string warning = "‚ö†Ô∏è ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Î™ÖÎ†πÏûÖÎãàÎã§.\n";
                send(clientSocket, warning.c_str(), warning.size(), 0);
            }
        }
        else {
            std::cout << "‚ö†Ô∏è ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ï¢ÖÎ£å Í∞êÏßÄ." << std::endl;
            keepRunning = false;
        }
    }

    closesocket(clientSocket);
    std::cout << "üîö ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïä§Î†àÎìú Ï¢ÖÎ£å\n" << std::endl;
    return 0;
}

int main() {
    WSADATA wsaData;
    SOCKET serverSocket, clientSocket;
    struct sockaddr_in serverAddr, clientAddr;
    int clientSize = sizeof(clientAddr);

    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup Ïã§Ìå®" << std::endl;
        return 1;
    }

    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == INVALID_SOCKET) {
        std::cerr << "ÏÜåÏºì ÏÉùÏÑ± Ïã§Ìå®" << std::endl;
        WSACleanup();
        return 1;
    }

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(PORT);

    if (bind(serverSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        std::cerr << "Î∞îÏù∏Îìú Ïã§Ìå®" << std::endl;
        closesocket(serverSocket);
        WSACleanup();
        return 1;
    }

    if (listen(serverSocket, SOMAXCONN) == SOCKET_ERROR) {
        std::cerr << "Î¶¨Ïä® Ïã§Ìå®" << std::endl;
        closesocket(serverSocket);
        WSACleanup();
        return 1;
    }

    std::cout << "‚úÖ ÏÑúÎ≤Ñ Ïã§Ìñâ Ï§ë (Ìè¨Ìä∏ " << PORT << ")" << std::endl;
    std::cout << "‚ñ∂Ô∏è angry_smooth.mp4 Ïã§Ìñâ..." << std::endl;
    playVideo(VIDEO1_PATH);

    while (true) {
        std::cout << "üí§ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ ÎåÄÍ∏∞ Ï§ë..." << std::endl;
        clientSocket = accept(serverSocket, (sockaddr*)&clientAddr, &clientSize);
        if (clientSocket == INVALID_SOCKET) {
            std::cerr << "‚ùå ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ïã§Ìå®" << std::endl;
            continue;
        }

        std::cout << "üôã ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞Îê®! Ïä§Î†àÎìúÎ°ú Ï≤òÎ¶¨Ìï©ÎãàÎã§." << std::endl;
        CreateThread(NULL, 0, ClientHandler, &clientSocket, 0, NULL);
    }

    closesocket(serverSocket);
    WSACleanup();
    return 0;
}
